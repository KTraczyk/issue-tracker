/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/issues': {
    /** Returns issues list */
    get: operations['getIssues'];
    /** Create new issue */
    post: operations['createIssue'];
  };
  '/v1/issues/{issueId}': {
    /** Return issue */
    get: operations['getIssue'];
    /** Edit issue */
    put: operations['editIssue'];
    /** Remove issue */
    delete: operations['removeIssue'];
  };
  '/v1/issues/{issueId}/{issueEvent}': {
    /** Remove issue */
    post: operations['issueEvent'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Issue: {
      id: string;
      title: string;
      description: string;
      state: components['schemas']['IssueState'];
    };
    Error: {
      message: string;
    };
    /** @enum {string} */
    IssueState: 'pending' | 'opened' | 'closed';
    /** @enum {string} */
    IssueEvent: 'moveToClosed' | 'moveToPending';
  };
  responses: {
    /** @description List of issues */
    IssuesListResponse: {
      content: {
        'application/json': components['schemas']['Issue'][];
      };
    };
    /** @description Single issue */
    IssueResponse: {
      content: {
        'application/json': components['schemas']['Issue'];
      };
    };
    /** @description Bad request */
    BadRequest: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description Resource not found */
    NotFound: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
  parameters: {
    IssueId: string;
    IssueEvent: components['schemas']['IssueEvent'];
  };
  requestBodies: {
    IssueBody: {
      content: {
        'application/json': {
          title: components['schemas']['Issue']['title'];
          description: components['schemas']['Issue']['description'];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Returns issues list */
  getIssues: {
    responses: {
      200: components['responses']['IssuesListResponse'];
    };
  };
  /** Create new issue */
  createIssue: {
    requestBody: components['requestBodies']['IssueBody'];
    responses: {
      200: components['responses']['IssueResponse'];
    };
  };
  /** Return issue */
  getIssue: {
    parameters: {
      path: {
        issueId: components['parameters']['IssueId'];
      };
    };
    responses: {
      200: components['responses']['IssueResponse'];
      400: components['responses']['BadRequest'];
    };
  };
  /** Edit issue */
  editIssue: {
    parameters: {
      path: {
        issueId: components['parameters']['IssueId'];
      };
    };
    requestBody: components['requestBodies']['IssueBody'];
    responses: {
      200: components['responses']['IssueResponse'];
      400: components['responses']['BadRequest'];
      404: components['responses']['NotFound'];
    };
  };
  /** Remove issue */
  removeIssue: {
    parameters: {
      path: {
        issueId: components['parameters']['IssueId'];
      };
    };
    responses: {
      200: components['responses']['IssueResponse'];
      400: components['responses']['BadRequest'];
      404: components['responses']['NotFound'];
    };
  };
  /** Remove issue */
  issueEvent: {
    parameters: {
      path: {
        issueId: components['parameters']['IssueId'];
        issueEvent: components['parameters']['IssueEvent'];
      };
    };
    responses: {
      200: components['responses']['IssueResponse'];
      400: components['responses']['BadRequest'];
      404: components['responses']['NotFound'];
    };
  };
}
